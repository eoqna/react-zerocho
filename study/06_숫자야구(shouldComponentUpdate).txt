shouldComponentUpdate(nextProps, nextState, nextContext) {
    if( this.state.counter !== nextState.counter) {
      return true;
    }
    return false;
  }


자식 컴포넌트가 리렌더링 되는 경우
1. state가 변경되었을 때
2. props가 변경되었을 때
3. 부모 컴포넌트가 리렌더링 되었을 때

부모 컴포넌트가 재렌더링되면 자식 컴포넌트도 무조건 재렌더링된다.
상위 컴포넌트에서 props를 받은 하위 컴포넌트가 상위 컴포넌트 재렌더링 시 같이 재렌더링 되는 현상을 막기 위해 사용하는 함수

PureComponent
위와 같은 기능을 하는 Class Component
state가 달라졌을 때 리렌더링 되게 할 수도 있고 props가 달라졌을 때 리렌더링되게 해줄 수 있다.

단점 : 객체나 배열 같은 복잡한 구조(참조 관계가 있는 구조)가 생기면 PureComponent도 판단하기 어려워한다.

ex) state = { array: [] }

	onClick = () => {
		const array = this.state.array;
		array.push(1);
		this.setState({
			array: array,
		})
	}

	this.state.array == array  : 현재 array와 다음 array는 같다고 생각해서 true값이 나온다. 따라서 재렌더링 되지않는다.

해결방법 : 값을 바꿔준 것을 PureComponent가 인식하여 재렌더링된다.
	onClick = () => {
		this.setState({
			array: [...this.state.array, 1],
		});
	}



Function Component

memo를 사용해 함수를 묶어주면 리렌더링을 막을 수 있다.

ex)

import React, { memo } from 'react';

const ChildComponent = memo(({props}) => {

	return (
		<p>props.value</p>
	);
});


성능 최적화 때문에 사용하는 것이 좋다.
하지만 성능 문제가 없다면 굳이 사용하지 않아도 된다.